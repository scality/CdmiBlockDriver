#!/usr/bin/env python

# srb - A simple CDMI volume operations client
# Copyright (C) 2015  Scality SA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import subprocess

import requests

MODULE_NAME = 'srb'
DEFAULT_HEADERS = {
    'User-Agent': 'srb/0.0.1',
}

def call_silent(cmd):
    with open('/dev/null', 'w') as fd:
        return subprocess.call(cmd, stdout=fd, stderr=fd)

def stdout(msg, *args):
    sys.stdout.writelines([msg % args, '\n'])

def stderr(msg, *args):
    sys.stderr.writelines([msg % args, '\n'])

def handle_module_load(args):
    rc = call_silent(['modinfo', '-n', MODULE_NAME])

    if rc != 0:
        raise EnvironmentError('Module \'%s\' not found' % MODULE_NAME)

    rc = call_silent(['modprobe', MODULE_NAME])
    if rc == 0:
        stdout('Module \'%s\' loaded successfully', MODULE_NAME)
    else:
        stderr('Failed to load module \'%s\'', MODULE_NAME)

def make_headers(extra=None):
    result = DEFAULT_HEADERS.copy()
    if extra:
        result.update(extra)

    return result

def handle_volume_list(args):
    headers = make_headers({
        'X-CDMI-Specification-Version': '1.0.1',
    })

    response = requests.get(args.url, headers=headers)
    response.raise_for_status()

    for child in response.json()['children']:
        print child

def handle_volume_create(args):
    headers = make_headers({
        'If-None-Match': '*',
    })

    response = requests.put(args.url, headers=headers)
    response.raise_for_status()

    headers = make_headers({
        'X-Scal-Truncate': args.size,
    })

    response = requests.put(args.url, headers=headers)
    response.raise_for_status()

def handle_volume_delete(args):
    headers = make_headers()

    response = requests.delete(args.url, headers=headers)
    response.raise_for_status()

def handle_volume_extend(args):
    headers = make_headers()
    params = {
        'metadata': 1,
    }

    response = requests.get(args.url, params=params)
    response.raise_for_status()

    current_size = response.json()['metadata']['cdmi_size']

    if current_size > args.size:
        raise ValueError('Can\'t shrink volumes')

    headers == make_headers({
        'X-Scal-Truncate': args.size,
    })

    response = requests.put(args.url, headers=headers)
    response.raise_for_status()

def main(args):
    parser = argparse.ArgumentParser(
                description='SRB utilities',
                epilog='Note: For some commands root permissions are required')

    subparser = parser.add_subparsers(title='subcommands')

    parser_module_load = subparser.add_parser('module-load')
    parser_module_load.set_defaults(func=handle_module_load)

    parser_volume_list = subparser.add_parser('volume-list')
    parser_volume_list.set_defaults(func=handle_volume_list)
    parser_volume_list.add_argument('url', metavar='URL', type=str,
        help='CDMI container URL')

    parser_volume_create = subparser.add_parser('volume-create')
    parser_volume_create.set_defaults(func=handle_volume_create)
    parser_volume_create.add_argument('url', metavar='URL', type=str,
        help='CDMI object URL')
    parser_volume_create.add_argument('size', metavar='SIZE', type=int,
        help='Object size (in bytes)')

    parser_volume_delete = subparser.add_parser('volume-delete')
    parser_volume_delete.set_defaults(func=handle_volume_delete)
    parser_volume_delete.add_argument('url', metavar='URL', type=str,
        help='CDMI object URL')

    parser_volume_extend = subparser.add_parser('volume-extend')
    parser_volume_extend.set_defaults(func=handle_volume_extend)
    parser_volume_extend.add_argument('url', metavar='URL', type=str,
        help='CDMI object URL')
    parser_volume_extend.add_argument('size', metavar='SIZE', type=int,
        help='Object size (in bytes)')

    args = parser.parse_args(args)

    try:
        args.func(args)
    except Exception as exc:
        stderr(str(exc))
        sys.exit(1)

if __name__ == '__main__':
    main(None)
